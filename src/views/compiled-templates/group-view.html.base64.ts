export const tpl =
  '<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Projects Activity</title>
    <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@4.1.0/cdn.min.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 20px;
        color: #333;
      }
      .container {
        max-width: 1800px;
        margin: 0 auto;
      }
      .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
      }
      .dashboard-title {
        margin: 0;
      }
      .row {
        display: flex;
        margin-bottom: 30px;
        gap: 20px;
      }
      .chart-container {
        flex: 1;
        height: 300px;
        border: 1px solid #eaeaea;
        border-radius: 5px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
      th,
      td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
      }
      th {
        background-color: #f8f8f8;
        font-weight: bold;
      }
      tr:hover {
        background-color: #f5f5f5;
      }
      a {
        color: #1a73e8;
        text-decoration: none;
      }
      a:hover {
        text-decoration: underline;
      }
      .table-container {
        margin-top: 20px;
        border: 1px solid #eaeaea;
        border-radius: 5px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }
      .table-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
        margin-bottom: 5px;
      }
      .table-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
      }
      h2,
      h3 {
        margin: 0;
        color: #444;
      }
      .source-description {
        font-style: italic;
        color: #666;
      }
      .source-info {
        font-style: italic;
        font-size: smaller;
        color: #666;
      }
      /* Switch button styles */
      .switch-container {
        display: flex;
        align-items: center;
      }
      .switch-label {
        margin: 0 10px;
        font-weight: bold;
        font-size: 14px;
      }
      .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 28px;
      }
      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }
      .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 34px;
      }
      .slider:before {
        position: absolute;
        content: '';
        height: 20px;
        width: 20px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
      }
      input:checked + .slider {
        background-color: #2196f3;
      }
      input:focus + .slider {
        box-shadow: 0 0 1px #2196f3;
      }
      input:checked + .slider:before {
        transform: translateX(32px);
      }
      .view-mode {
        margin-left: 8px;
        font-weight: bold;
        min-width: 90px;
      }
    </style>
  </head>
  <body>
    <a href="index.html">🔙</a>
    <div class="container">
      <div class="dashboard-header">
        <h2 id="dashboard-title" class="dashboard-title"></h2>
        <div class="switch-container">
          <span class="switch-label">Story Points</span>
          <label class="switch">
            <input type="checkbox" id="view-mode-switch" />
            <span class="slider"></span>
          </label>
          <span class="switch-label">Count</span>
        </div>
      </div>
      <p class="source-description" id="dashboard-description"></p>
      <p class="source-info" id="dashboard-metadata"></p>

      <div class="row">
        <div class="chart-container" id="weeklycompletionchart"></div>
        <div class="chart-container" id="weeklyvelocitychart"></div>
        <div class="chart-container" id="effortdistributionchart"></div>
      </div>

      <div class="table-container">
        <div class="table-header">
          <h3 id="table-title"></h3>
          <span id="selected-source"
            >Click on any chart bar to see details</span
          >
        </div>
        <table>
          <thead>
            <tr>
              <th>#</th>
              <th>Title</th>
              <th>Type</th>
              <th>Repo</th>
              <th>Milestone</th>
              <th>Points</th>
            </tr>
          </thead>
          <tbody id="details-table">
            <tr>
              <td colspan="3">No data selected</td>
            </tr>
          </tbody>
        </table>
      </div>

      <p class="source-info" id="dashboard-projectfilter"></p>

      <div class="table-container">
        <div class="table-header">
          <h3>Data Streams</h3>
        </div>
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Query</th>
              <th>Nodes</th>
            </tr>
          </thead>
          <tbody id="details-table-stream">
            <tr>
              <td colspan="3">No data selected</td>
            </tr>
          </tbody>
        </table>
        <div class="table-footer">
          <span
            ><i
              >Streams are queries executed against ALL Issues and Pull Requests
              (PR) attached to the selected project. <br />
              Their order matters, if a Issue or PR is present in the first
              stream, it will be ignored on the following streams. This prevents
              issues/PRs from being counted multiple times.</i
            ></span
          >
        </div>
      </div>
    </div>

    <script>
      const base64DecodeUnicode = (base64String) => {
        const binaryString = window.atob(base64String)
        const bytes = new Uint8Array(binaryString.length)

        for (let i = 0; i < binaryString.length; i++) {
          bytes[i] = binaryString.charCodeAt(i)
        }

        return new TextDecoder('utf-8').decode(bytes)
      }

      // Single JavaScript data object containing all our data
      const srcData = base64DecodeUnicode('REPLACE_ME')
      const groupMetrics = JSON.parse(srcData)
      console.log('Source data decoded', groupMetrics)

      // Copied to the window object to facilitate building of queries
      window.dataNodes = groupMetrics.nodes
      window.groupMetrics = groupMetrics

      document.title = groupMetrics.name

      // Update the table with data clicked in the chart
      function updateTable({ srcChart, selection, nodes }) {
        console.log('Updating table with data coming from:', srcChart)

        document.getElementById('table-title').textContent =
          `Nodes from ${srcChart}`
        document.getElementById('selected-source').textContent =
          `Selection: ${selection}`

        const tableBody = document.getElementById('details-table')
        tableBody.innerHTML = ''

        nodes.forEach((node) => {
          const row = document.createElement('tr')
          row.innerHTML = `
                <td>${node.number}</td>
                <td><a href="${node.url}" target="_blank">${node.title}</a></td>
                <td>${node.type}</td>
                <td><a href="${node.repository.url}" target="_blank">${node.repository.owner.login}/${node.repository.name}</a></td>
                <td>${node.milestone?.title ? node.milestone?.title : ''}</td>
                <td>${node.points}</td>
              `
          tableBody.appendChild(row)
        })
      }

      function updateStreamsTable(srcData) {
        const tableBody = document.getElementById('details-table-stream')
        tableBody.innerHTML = ''

        srcData.streams.forEach((stream) => {
          const row = document.createElement('tr')
          row.innerHTML = `
                <td>${stream.name}</td>
                <td>${stream.description}</td>
                <td>${JSON.stringify(stream.query)}</td>
                <td>${stream.nodes.length}</td>
              `
          tableBody.appendChild(row)
        })
      }

      const tooltipFormatter = (params, unit = '') => {
        // Limit tooltip to top 10 values at the point
        const sortedParams = [...params].sort((a, b) => b.value - a.value)
        const limited = sortedParams.slice(0, 10)

        let result = `${limited[0].axisValue}<br>`
        limited.forEach((param) => {
          if (param.value === undefined) {
            return
          }
          result += `${param.marker} ${param.seriesName}: ${Math.round(param.value)}${unit}<br>`
        })

        if (params.length > 10) {
          result += `<i>... and ${params.length - 10} more</i>`
        }

        return result
      }

      const getLegend = (streamsLength) => {
        let legend = {
          top: 'top',
          left: 'center',
          top: 30
        }
        if (streamsLength > 8) {
          legend.type = 'scroll'
        }
        return legend
      }
      function createWeeklyCompletionChart(elementId, data, metric) {
        const chartDom = document.getElementById(elementId)
        const myChart = echarts.init(chartDom)

        const visibleCount = 20
        const startPercentage =
          ((data.weeks.length - visibleCount) / data.weeks.length) * 100
        const endPercentage = 100

        const chartTitle = 'Weekly Completion'

        const highestValue = Math.max(
          ...data.weeks.map((week) => week.metrics.nodes.count)
        )
        const roundUpHighest = Math.ceil(highestValue / 10) * 10

        const option = {
          title: {
            text: chartTitle,
            position: 'top',
            left: 'center',
            textStyle: {
              fontSize: 14
            }
          },
          legend: getLegend(data.streams.length),
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'shadow'
            },
            formatter: function (params) {
              return tooltipFormatter(params)
            }
          },
          grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            top: '30%',
            containLabel: true
          },
          dataZoom: [
            {
              type: 'inside', // Allows scrolling with mouse or touch gestures
              xAxisIndex: 0,
              start: startPercentage,
              end: endPercentage
            }
          ],
          xAxis: {
            type: 'category',
            axisLabel: { interval: 0, rotate: 30 },
            data: data.weeks.map((value, index) =>
              dateFns.format(new Date(value.firstDay), 'LLL do')
            )
          },
          yAxis: {
            type: 'value',
            min: 0,
            max: roundUpHighest
          },
          series: [
            ...data.streams.map((stream, index) => {
              return {
                name: stream.name,
                type: 'bar',
                stack: 'ad',
                data: stream.weeks.map(
                  (value, index) => value.metrics[metric].count
                )
              }
            }),
            {
              name: 'Total',
              type: 'line',
              data: data.weeks.map((week, index) => week.metrics[metric].count)
            }
          ]
        }

        // Apply options to chart
        myChart.setOption(option)

        // Add click event for interactivity
        myChart.on('click', function (params) {
          const streamName = params.seriesName
          const streamIndex = params.dataIndex
          const stream = data.streams.find(
            (stream) => stream.name === streamName
          )
          if (stream && stream.weeks[streamIndex]) {
            updateTable({
              srcChart: chartTitle,
              selection: `${streamName} on ${dateFns.format(new Date(stream.weeks[streamIndex].firstDay), 'LLL do')} (${stream.weeks[streamIndex].nodes.length} nodes)`,
              nodes: stream.weeks[streamIndex].nodes
            })
          }
        })

        // Make chart responsive
        window.addEventListener('resize', function () {
          myChart.resize()
        })

        return myChart
      }

      function createWeeklyVelocityChart(elementId, data, metric) {
        const chartDom = document.getElementById(elementId)
        const myChart = echarts.init(chartDom)

        const visibleCount = 20
        const startPercentage =
          ((data.weeks.length - visibleCount) / data.weeks.length) * 100
        const endPercentage = 100

        const chartTitle = 'Weekly Velocity'

        const highestValue = Math.max(
          ...data.weeks.map((week) => week.metrics.nodes.velocity)
        )
        const roundUpHighest = Math.ceil(highestValue / 10) * 10

        const option = {
          title: {
            text: chartTitle,
            position: 'top',
            left: 'center',
            textStyle: {
              fontSize: 14
            }
          },
          legend: getLegend(data.streams.length),
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'shadow'
            },
            formatter: function (params) {
              return tooltipFormatter(params)
            }
          },
          grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            top: '30%',
            containLabel: true
          },
          dataZoom: [
            {
              type: 'inside', // Allows scrolling with mouse or touch gestures
              xAxisIndex: 0,
              start: startPercentage,
              end: endPercentage
            }
          ],
          xAxis: {
            type: 'category',
            axisLabel: { interval: 0, rotate: 30 },
            data: data.weeks.map((value, index) =>
              dateFns.format(new Date(value.firstDay), 'LLL do')
            )
          },
          yAxis: {
            type: 'value',
            min: 0,
            max: roundUpHighest
          },
          series: [
            ...data.streams.map((stream, index) => {
              return {
                name: stream.name,
                type: 'line',
                data: stream.weeks.map(
                  (value, index) => value.metrics[metric].velocity
                )
              }
            }),
            {
              name: 'Total',
              type: 'line',
              data: data.weeks.map(
                (week, index) => week.metrics[metric].velocity
              )
            }
          ]
        }

        // Apply options to chart
        myChart.setOption(option)

        // Make chart responsive
        window.addEventListener('resize', function () {
          myChart.resize()
        })

        return myChart
      }

      function createEffortDistributionChart(elementId, data, metric) {
        const chartDom = document.getElementById(elementId)
        const myChart = echarts.init(chartDom)

        const visibleCount = 20
        const startPercentage =
          ((data.weeks.length - visibleCount) / data.weeks.length) * 100
        const endPercentage = 100

        const chartTitle = 'Effort Distribution (%)'

        const option = {
          title: {
            text: chartTitle,
            position: 'top',
            left: 'center',
            textStyle: {
              fontSize: 14
            }
          },
          legend: getLegend(data.streams.length),
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'shadow'
            },
            formatter: function (params) {
              return tooltipFormatter(params, '%')
            }
          },
          grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            top: '30%',
            containLabel: true
          },
          dataZoom: [
            {
              type: 'inside', // Allows scrolling with mouse or touch gestures
              xAxisIndex: 0,
              start: startPercentage,
              end: endPercentage
            }
          ],
          xAxis: {
            type: 'category',
            axisLabel: { interval: 0, rotate: 30 },
            data: data.weeks.map((value, index) =>
              dateFns.format(new Date(value.firstDay), 'LLL do')
            )
          },
          yAxis: {
            type: 'value',
            min: 0,
            max: 100
          },
          series: [
            ...data.streams.map((stream, index) => {
              return {
                name: stream.name,
                type: 'bar',
                stack: 'ad',
                data: stream.weeks.map(
                  (value, index) => value.metrics[metric].distribution
                ),
                barWidth: '100%', // Ensures bars fill their allocated space
                barGap: '0%', // Removes spacing between series (if multiple)
                barCategoryGap: '0%' // Removes spacing between categories
              }
            })
          ]
        }

        // Apply options to chart
        myChart.setOption(option)

        // Add click event for interactivity
        myChart.on('click', function (params) {
          const streamName = params.seriesName
          const streamIndex = params.dataIndex
          const stream = data.streams.find(
            (stream) => stream.name === streamName
          )
          if (stream && stream.weeks[streamIndex]) {
            updateTable({
              srcChart: chartTitle,
              selection: `${streamName} on ${dateFns.format(new Date(stream.weeks[streamIndex].firstDay), 'LLL do')} (${stream.weeks[streamIndex].nodes.length} nodes)`,
              nodes: stream.weeks[streamIndex].nodes
            })
          }
        })

        // Make chart responsive
        window.addEventListener('resize', function () {
          myChart.resize()
        })

        return myChart
      }

      function toggleViewMode() {
        const switchElement = document.getElementById('view-mode-switch')

        updateAllCharts(switchElement.checked ? 'nodes' : 'points')
      }

      const filteredDataset = (groupMetrics) => {
        if (groupMetrics.query === undefined) {
          return ''
        } else {
          return `Overall project data filtered: ${JSON.stringify(groupMetrics.query)}  <br />`
        }
      }

      // Function to initialize the dashboard metadata
      function initializeDashboard() {
        // Set dashboard title and metadata from the data object
        document.getElementById('dashboard-title').textContent =
          groupMetrics.name
        document.getElementById('dashboard-description').textContent =
          groupMetrics.description

        if (groupMetrics.query === undefined) {
          document.getElementById('dashboard-projectfilter').textContent = ''
        } else {
          document.getElementById('dashboard-projectfilter').textContent =
            `Overall project data filtered: ${JSON.stringify(groupMetrics.query)}`
        }

        document.getElementById('dashboard-metadata').textContent =
          `Last updated: ${groupMetrics.updatedAt}`

        const defaultMetric =
          groupMetrics.defaultMetric !== undefined
            ? groupMetrics.defaultMetric
            : 'points'

        updateAllCharts(defaultMetric)

        // Set up event listener for view mode switch
        const switchElement = document.getElementById('view-mode-switch')
        switchElement.checked = defaultMetric === 'nodes'

        switchElement.addEventListener('change', toggleViewMode)

        updateStreamsTable(groupMetrics)
      }

      function updateAllCharts(metric) {
        console.log('Updating all charts to display metric:', metric)
        createWeeklyCompletionChart(
          'weeklycompletionchart',
          groupMetrics,
          metric
        )

        createWeeklyVelocityChart('weeklyvelocitychart', groupMetrics, metric)

        createEffortDistributionChart(
          'effortdistributionchart',
          groupMetrics,
          metric
        )
      }

      // Initialize all charts when DOM is loaded
      document.addEventListener('DOMContentLoaded', initializeDashboard)
    </script>
  </body>
</html>
'

export default tpl
