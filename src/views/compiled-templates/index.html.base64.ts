export const tpl =
  '<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Project Dashboards</title>
    <style>
      :root {
        --primary-color: #3498db;
        --secondary-color: #2c3e50;
        --accent-color: #e74c3c;
        --light-bg: #f8f9fa;
        --border-color: #dee2e6;
        --text-color: #333;
        --text-light: #6c757d;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: var(--text-color);
        background-color: var(--light-bg);
        padding: 20px;
      }

      .container {
        max-width: 1800px;
        margin: 0 auto;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        padding: 30px;
      }

      header {
        margin-bottom: 30px;
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--border-color);
      }

      h1 {
        color: var(--secondary-color);
        font-size: 2.5rem;
        margin-bottom: 10px;
      }

      .subtitle {
        color: var(--text-light);
        font-size: 1.2rem;
      }

      .dashboard-table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
      }

      .dashboard-table th {
        background-color: var(--secondary-color);
        color: white;
        text-align: left;
        padding: 12px 15px;
      }

      .dashboard-table td {
        padding: 12px 15px;
        border-bottom: 1px solid var(--border-color);
      }

      .dashboard-table tr:nth-child(even) {
        background-color: var(--light-bg);
      }

      .dashboard-table tr:hover {
        background-color: rgba(52, 152, 219, 0.1);
      }

      .btn {
        display: inline-block;
        padding: 8px 15px;
        background-color: var(--primary-color);
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: all 0.3s ease;
      }

      .btn:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
      }

      footer {
        margin-top: 30px;
        text-align: center;
        color: var(--text-light);
        font-size: 0.9rem;
        padding-top: 20px;
        border-top: 1px solid var(--border-color);
      }

      .last-updated {
        margin-top: 10px;
        font-style: italic;
      }

      a {
        color: #3498db;
        text-decoration: none;
        position: relative;
        padding: 2px 0;
        font-weight: 500;
        transition: color 0.3s ease;
      }

      a:hover {
        color: #2980b9;
      }

      a::after {
        content: '';
        position: absolute;
        width: 100%;
        height: 1px;
        bottom: 0;
        left: 0;
        background-color: #2980b9;
        transform: scaleX(0);
        transform-origin: bottom right;
        transition: transform 0.3s ease;
      }

      a:hover::after {
        transform: scaleX(1);
        transform-origin: bottom left;
      }

      @media (max-width: 768px) {
        .dashboard-table {
          display: block;
          overflow-x: auto;
        }

        .container {
          padding: 15px;
        }

        h1 {
          font-size: 2rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <header>
        <h1 id="dashboard-title">Project Dashboards</h1>
      </header>
      <p class="subtitle">
        <a id="projectlink" href="https://www.example.com" target="_blank"
          >Project Link</a
        >
      </p>
      <main></main>
    </div>

    <script>
      const base64DecodeUnicode = (base64String) => {
        const binaryString = window.atob(base64String)
        const bytes = new Uint8Array(binaryString.length)

        for (let i = 0; i < binaryString.length; i++) {
          bytes[i] = binaryString.charCodeAt(i)
        }

        return new TextDecoder('utf-8').decode(bytes)
      }

      const srcData = base64DecodeUnicode('REPLACE_ME')
      const project = JSON.parse(srcData)
      console.log('Source data decoded', project)

      const title = `${project.title} Dashboards`
      document.title = title
      document.getElementById('dashboard-title').textContent = title

      const link = document.getElementById('projectlink')
      link.href = project.url
      link.textContent = 'Project in GitHub'

      // Function to populate the table
      function populateDashboardTable() {
        const tableBody = document.getElementById('dashboard-table-body')

        const categories = project.groups.reduce((acc, group) => {
          let category = acc.find((cat) => cat.name === group.category)
          if (!category) {
            category = { name: group.category, groups: [] }
            acc.push(category)
          }
          category.groups.push(group)
          return acc
        }, [])
        console.log('Dashboards groupped by category: ', categories)

        // Clear the main content area first
        const main = document.querySelector('main')
        main.innerHTML = ''

        // Create a single colgroup to enforce column widths
        function createColGroup() {
          const colgroup = document.createElement('colgroup')
          const nameCol = document.createElement('col')
          nameCol.style.width = '20%'
          const typeCol = document.createElement('col')
          typeCol.style.width = '10%'
          const descCol = document.createElement('col')
          descCol.style.width = '60%'
          const accessCol = document.createElement('col')
          accessCol.style.width = '10%'
          colgroup.appendChild(nameCol)
          colgroup.appendChild(typeCol)
          colgroup.appendChild(descCol)
          colgroup.appendChild(accessCol)
          return colgroup
        }

        // Sort categories so that those with undefined name come first
        categories.sort((a, b) => {
          if (a.name === undefined && b.name !== undefined) return -1
          if (a.name !== undefined && b.name === undefined) return 1
          return 0
        })

        categories.forEach((category) => {
          // Create and append category header if name is defined
          if (category.name !== undefined) {
            const categoryHeader = document.createElement('h2')
            categoryHeader.textContent = category.name
            main.appendChild(categoryHeader)
          }

          // Create table for this category
          const table = document.createElement('table')
          table.className = 'dashboard-table'

          // Add colgroup for consistent column widths
          table.appendChild(createColGroup())

          // Create table head
          const thead = document.createElement('thead')
          const headRow = document.createElement('tr')
          ;['Name', 'Type', 'Description', 'Access'].forEach((text) => {
            const th = document.createElement('th')
            th.textContent = text
            headRow.appendChild(th)
          })
          thead.appendChild(headRow)
          table.appendChild(thead)

          // Create table body
          const tbody = document.createElement('tbody')
          category.groups.forEach((dashboard) => {
            const row = document.createElement('tr')

            // Dashboard name cell
            const nameCell = document.createElement('td')
            nameCell.textContent = dashboard.name
            row.appendChild(nameCell)

            // Type name cell
            const typeCell = document.createElement('td')
            typeCell.textContent = dashboard.type || 'N/A'
            row.appendChild(typeCell)

            // Description cell
            const descCell = document.createElement('td')
            descCell.textContent = dashboard.description
            row.appendChild(descCell)

            // Access button cell
            const accessCell = document.createElement('td')
            const accessLink = document.createElement('a')
            accessLink.href = dashboard.link
            accessLink.className = 'btn'
            accessLink.textContent = 'View'
            accessCell.appendChild(accessLink)
            row.appendChild(accessCell)

            tbody.appendChild(row)
          })
          table.appendChild(tbody)
          main.appendChild(table)
        })
      }

      // Populate table when the DOM is fully loaded
      document.addEventListener('DOMContentLoaded', populateDashboardTable)
    </script>
  </body>
</html>
'

export default tpl
